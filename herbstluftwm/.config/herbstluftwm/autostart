#!/usr/bin/env bash

# NOTE: This PATH is only effective within this script, but *not* used by the
# home-manager process that responds to keybinds.
export PATH="$PATH:$HOME/bin"
SCRIPTS="$HOME/.config/herbstluftwm/scripts"
hc() {
    if [[ "$1" == "switch" ]] || [[ "$1" == "split" ]] ; then
    	herbstclient emit_hook switch
    fi
    herbstclient "$@"
}

# reload existing clients
hc emit_hook reload

# black background
xsetroot -solid '#000000'

# remove all existing keybindings
hc keyunbind --all

# keybindings
Mod=Mod4   # super

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
# Prevents accidentally closing protected windows
hc keybind $Mod-w spawn $HOME/bin/hc_close_protected
hc keybind $Mod-Shift-w close

# basic movement
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
fm="emit_hook focus_moved"
hc keybind $Mod-Shift-Left  chain , shift left , $fm
hc keybind $Mod-Shift-Down  chain , shift down , $fm
hc keybind $Mod-Shift-Up    chain , shift up , $fm
hc keybind $Mod-Shift-Right chain , shift right , $fm
hc keybind $Mod-Shift-h     chain , shift left , $fm
hc keybind $Mod-Shift-j     chain , shift down , $fm
hc keybind $Mod-Shift-k     chain , shift up , $fm
hc keybind $Mod-Shift-l     chain , shift right , $fm

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u       chain , split   bottom  0.5 , focus -e down
hc keybind $Mod-o       chain , split   right   0.5 , focus -e right
# let the current frame explode into subframes
hc keybind $Mod-Control-space chain , split explode , $fm

# resizing frames
bigresize=0.05
hc keybind $Mod-Control-h       resize left +$bigresize
hc keybind $Mod-Control-j       resize down +$bigresize
hc keybind $Mod-Control-k       resize up +$bigresize
hc keybind $Mod-Control-l       resize right +$bigresize
hc keybind $Mod-Control-Left    resize left +$bigresize
hc keybind $Mod-Control-Down    resize down +$bigresize
hc keybind $Mod-Control-Up      resize up +$bigresize
hc keybind $Mod-Control-Right   resize right +$bigresize
smallresize=0.01
hc keybind $Mod-Control-Shift-h       resize left +$smallresize
hc keybind $Mod-Control-Shift-j       resize down +$smallresize
hc keybind $Mod-Control-Shift-k       resize up +$smallresize
hc keybind $Mod-Control-Shift-l       resize right +$smallresize
hc keybind $Mod-Control-Shift-Left    resize left +$smallresize
hc keybind $Mod-Control-Shift-Down    resize down +$smallresize
hc keybind $Mod-Control-Shift-Up      resize up +$smallresize
hc keybind $Mod-Control-Shift-Right   resize right +$smallresize

# tags
tag_names=( {1..9} h)
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
hc keybind $Mod-r chain , remove , $fm
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle

# Two ways of hiding windows: Send to dedicated workspace or minimize entirely
# (not visible in any workspace).
# Minimized windows can be restored #with `jumpto <winid>` or by jumping to the window with rofi.
hc keybind $Mod-m move_index 9
hc keybind $Mod-Shift-m set_attr clients.focus.minimized toggle
hc keybind $Mod-t spawn "$SCRIPTS/maximize.sh" # like "monocle" in bspwm
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-Shift-space                                                     \
            chain : or , and . compare tags.focus.curframe_wcount = 2                   \
                       . cycle_layout +1 vertical horizontal max vertical grid    \
                       , cycle_layout +1 : $fm

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set window_border_active_color red
hc set frame_border_active_color '#101010'
hc set frame_border_normal_color '#101010'
hc set frame_bg_normal_color '#333333'
hc set frame_bg_active_color '#345F0C'
hc set frame_border_width 1
hc set always_show_frame 1
hc set frame_bg_transparent 1
hc set frame_transparent_width 5
hc set frame_gap 4

hc attr theme.active.color '#9fbc00'
hc attr theme.normal.color '#454545'
hc attr theme.urgent.color orange
hc attr theme.inner_width 1
hc attr theme.inner_color black
hc attr theme.border_width 3
hc attr theme.floating.border_width 4
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#3E4A00'
hc attr theme.active.outer_color '#3E4A00'
hc attr theme.background_color '#141414'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0

hc set focus_follows_mouse 0

# Automatically detect the monitor setup and adjust if it is changed.
hc set auto_detect_monitors  1

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on hook=focus_moved # normally focus new clients
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

# unlock, just to be sure
hc unlock

herbstclient set tree_style '╾│ ├└╼─┐'

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors

manage_panels() {
	# Start one panel for each monitor and restart them whenever the monitor
	# count changes
	herbstclient watch monitors.count # make sure monitor changes trigger attribute_changed hooks
	panel_pids=() # keep track of started panels so that we can later stop them again
	( echo "initial" ; herbstclient --idle attribute_changed monitors.count ) | while read line; do
		for pid in "${panel_pids[@]}"; do
			echo "Killing $pid"
			kill "$pid"
		done
		panel_pids=()
		# find the panel
		panel=~/.config/herbstluftwm/panel.sh
		[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
		echo Starting
		# The herbstclient monitors output is sometimes not accurate immediately
		# after a monitor has been plugged in, give it a second.
		sleep 1
		for monitor in $(herbstclient list_monitors | cut -d: -f1) ; do
			# start it on each monitor
			"$panel" $monitor &
			panel_pids+=("$!")
			echo "Starting panel $!"
			# see also https://herbstluftwm.org/faq.html
		done
	done
}
manage_panels &

# Apply layout
hc split vertical 0.5; hc remove

if hc silent new_attr bool my_not_first_autostart ; then
    echo autostart
	"$SCRIPTS/mouse_follows_focus.sh" & # todo kill on reload
	# wm independent keybinds # todo kill on reload
	sxhkd &
    # /path/to/examples/exec_on_tag.sh web firefox &
fi

